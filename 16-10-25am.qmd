## Lecture 4: Version Control with Git and Github

### Version control
- A tool that tracks changes to raw text files.

- Records changes you made and the order in which you made them.

- Offers more efficient backup.

- Easy to roll back (all of part of) your work.

- Can share one version with collaborators whilst you work on another.

- Don't add result/output files to version control - think about this when setting up file storage.

- Store code in separate files where possible. This allows two people to work on separate files, making merge conflicts less likely.

- Never store sensitive information in version control


### How do they work
- Start by storing the original base version of the file.

- After that, only changes are stored.

- Two users make independent sets of changes, creating two different versions of the same document (called branches).

- Can merge different branches together onto the same base document.



### Version Control Platforms
- Services offered by companies which provide remote repositories to store your files. This protects files from fire, theft, etc.

- Separate but related to the version control software itself (git).

- Github is most popular. Gitlab also popular, but falling out of favour. Offers more control than github, but more difficult to use. 

- Github student accounts offer free perks.

- To set up git and github - generate 'ssh key pair' to authenticate yout computer - essentially replaces passwords
    - one private key that never leaves your computer
    - one public key

- Anyone with the public key can verify that you own the private key without them having to see 

- Upload the public one to Github as authentication

- Now can securely transfer


### Workflows
- Different groups have different ways of working with version control

- A workflow is agreed upon e.g have a main branch and a development branch that people contribute to before adding to main branch.


### Command Line Interface (CLI)
- Best way to use git for learning

- Necessary for HPC clusters

- Once comfortable, use as part of IDE graphically



## Notes from exercises
### Setting up Git
When on a new machine, need to configure username, email, and default text editor to use when adding commit messages etc.


```bash
git config --global user.name "Firstname Surname"
git config --global user.email "fsurname@university.ac.uk"
git config --global core.editor "nano -w"
```

The configuration settings can be view with 

```bash
git config --list
```

Help can be accessed with
```bash
git config -h       # and
git config --help
```

To back work up to GitHub, a pair of SSH keys is needed. To generate these, type
```bash
ssh-keygen -t ed25519
```

This creates a folder in the root directory called /.ssh. Inside, there is a private and public key - the public ends with extension .pub. This can be printed in the terminal with

```bash
cat ~/.ssh/id_ed25519.pub
```
This can be copied into github's SSH settings (copy the entire output of cat).



### Cloning repositories
- Find the desired repo on Github, click on the Code box, then clone. Select SSH and copy the address given. 

- In the terminal, type 
```bash
git clone {repository url}
```


### Initialising your own repository
- Enter an existing repo and type 'git init'. This turns it into a git repo, which can be verified with 'ls -a' to see a .git folder.

- Next, make an empty repo on GitHub and name it. Then copy the SSH url option and type 
```bash
git remote add origin {ssh url}
```

- If the repo already contains files, they need to be added and committed. This can be done with 'git add .', then git commit -m 'your commit message'. 'git add .' adds all files that have been changed (in this case every file in the repo). 

- Once the commits have been made, they can be pushed to github with
```bash
git push -u origin main
```
The origin main connects the local main branch with the main branch of the remote repo. The -u saves this as the default connection for all future pushes.



### Workflow
- The general workflow in Git is:
    - make a change to a file
    - add all desired changes to the staging area
    - commit all changes in staging area (saves these changes)
    -  push these changes to the remote branch



- Useful commands include:
    - git status: shows the changes in the staging area to be committed 
    - git diff: shows an overview of the changes made to a file. Can view changes compared with versions saved in older commits using git diff HEAD~n filename, where n is the number of commits prior you want to check. Alternatively, you can use the identifier of the commit you want to compare with (obtained from git log)
    - git log: shows the history of the repo (previous commits and pushes etc)
    - git restore: returns the previous state of a file (obtained from last commit). git checkout <HEAD or commit ID> filename can be used to restore a file from any previously saved commit.



### Using the remote branch
- If a local branch is already connected with the corresponding remote branch (e.g main local is connected with main remote), then the command used is
```bash
git push
```

- If it is the first time pushing to a new branch
```bash
git push -u origin {desired name of remote branch}
```
The -u sets this behaviour as default for this branch.

- A push can fail if a conflict between the local and remote branches occurs. This typically happens if the same lines of the same file is edited both on the remote branch and on the local. To fix this, we use 'git pull' to pull the new file, fix the conflicts on our own pc, then push again once they have been resolved. Note when git pull is used for the first time, a default method for merging may be required. In this case, the following and try 'git pull' again
```bash
git config --global pull.rebase false
```


- To mitigate conflicts, code should be split into multiple files where possible, and separate branches be used.


### Branches
- To view current branches, type
```bash
git branch
```
The current branch is indicated with an *.

- To create a new branch, type
```bash
git branch {new branch name}
```

- To switch branches type
```bash
git switch {branch name}
```

- To merge branches from branch a to branch b, navigate to branch a and type
```bash
git merge {branch name}
```
This can be followed by git push to update the remote branch as usual.

- For larger projects, its best to use a pull request to merge branches. When a new push has been made to a branch, Github displays a banner saying 'Compare and Pull Request'. This does a similar thing to git merge, but gives a graphical UI that allows notes to be made, requests for senior colleagues to check over work, and more.


### Ignoring files
- To stop git tracking certain files, a file called .gitignore can be made in the root directory of the project.  

- The contents of the file may look like
```bash
*.dat
results/
```
In this case, all files ending .dat, and all files within the results folder, will not be tracked by git.

- This is useful as typically data files and other output files should not be tracked using git as it may take up lots of disk space, and distracts from the relevent details.

- Empty folder are not pushed to git, e.g the results folder if all contents have been added to .gitignore, the folder will not appear in the remote branch. To fix this, a file called .gitkeep can be added to folder. We then add this to the commit using 
```bash
git add -f folder/.gitkeep
```
Note that the -f (force) is required to overide the .gitignore instructions. This can be commited and pushed. The folder should now appear in the remote branch
